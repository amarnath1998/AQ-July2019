#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PatientApp.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AQDB")]
	public partial class PatientDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDoctorTable(DoctorTable instance);
    partial void UpdateDoctorTable(DoctorTable instance);
    partial void DeleteDoctorTable(DoctorTable instance);
    partial void InsertPatientTable(PatientTable instance);
    partial void UpdatePatientTable(PatientTable instance);
    partial void DeletePatientTable(PatientTable instance);
    #endregion
		
		public PatientDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AQDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PatientDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PatientDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PatientDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PatientDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DoctorTable> DoctorTables
		{
			get
			{
				return this.GetTable<DoctorTable>();
			}
		}
		
		public System.Data.Linq.Table<PatientTable> PatientTables
		{
			get
			{
				return this.GetTable<PatientTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DoctorTable")]
	public partial class DoctorTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DoctorID;
		
		private string _Doctor;
		
		private string _Speciality;
		
		private int _Fees;
		
		private EntitySet<PatientTable> _PatientTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnDoctorChanging(string value);
    partial void OnDoctorChanged();
    partial void OnSpecialityChanging(string value);
    partial void OnSpecialityChanged();
    partial void OnFeesChanging(int value);
    partial void OnFeesChanged();
    #endregion
		
		public DoctorTable()
		{
			this._PatientTables = new EntitySet<PatientTable>(new Action<PatientTable>(this.attach_PatientTables), new Action<PatientTable>(this.detach_PatientTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Doctor
		{
			get
			{
				return this._Doctor;
			}
			set
			{
				if ((this._Doctor != value))
				{
					this.OnDoctorChanging(value);
					this.SendPropertyChanging();
					this._Doctor = value;
					this.SendPropertyChanged("Doctor");
					this.OnDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Speciality
		{
			get
			{
				return this._Speciality;
			}
			set
			{
				if ((this._Speciality != value))
				{
					this.OnSpecialityChanging(value);
					this.SendPropertyChanging();
					this._Speciality = value;
					this.SendPropertyChanged("Speciality");
					this.OnSpecialityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fees", DbType="Int NOT NULL")]
		public int Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				if ((this._Fees != value))
				{
					this.OnFeesChanging(value);
					this.SendPropertyChanging();
					this._Fees = value;
					this.SendPropertyChanged("Fees");
					this.OnFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DoctorTable_PatientTable", Storage="_PatientTables", ThisKey="DoctorID", OtherKey="DoctorID")]
		public EntitySet<PatientTable> PatientTables
		{
			get
			{
				return this._PatientTables;
			}
			set
			{
				this._PatientTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientTables(PatientTable entity)
		{
			this.SendPropertyChanging();
			entity.DoctorTable = this;
		}
		
		private void detach_PatientTables(PatientTable entity)
		{
			this.SendPropertyChanging();
			entity.DoctorTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientTable")]
	public partial class PatientTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntryId;
		
		private int _PatientID;
		
		private string _PatientName;
		
		private long _PatientContact;
		
		private string _Disease;
		
		private int _DoctorID;
		
		private int _Amount;
		
		private EntityRef<DoctorTable> _DoctorTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnPatientNameChanging(string value);
    partial void OnPatientNameChanged();
    partial void OnPatientContactChanging(long value);
    partial void OnPatientContactChanged();
    partial void OnDiseaseChanging(string value);
    partial void OnDiseaseChanged();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public PatientTable()
		{
			this._DoctorTable = default(EntityRef<DoctorTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntryId
		{
			get
			{
				return this._EntryId;
			}
			set
			{
				if ((this._EntryId != value))
				{
					this.OnEntryIdChanging(value);
					this.SendPropertyChanging();
					this._EntryId = value;
					this.SendPropertyChanged("EntryId");
					this.OnEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this.OnPatientNameChanging(value);
					this.SendPropertyChanging();
					this._PatientName = value;
					this.SendPropertyChanged("PatientName");
					this.OnPatientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientContact", DbType="BigInt NOT NULL")]
		public long PatientContact
		{
			get
			{
				return this._PatientContact;
			}
			set
			{
				if ((this._PatientContact != value))
				{
					this.OnPatientContactChanging(value);
					this.SendPropertyChanging();
					this._PatientContact = value;
					this.SendPropertyChanged("PatientContact");
					this.OnPatientContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Disease
		{
			get
			{
				return this._Disease;
			}
			set
			{
				if ((this._Disease != value))
				{
					this.OnDiseaseChanging(value);
					this.SendPropertyChanging();
					this._Disease = value;
					this.SendPropertyChanged("Disease");
					this.OnDiseaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int NOT NULL")]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._DoctorTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DoctorTable_PatientTable", Storage="_DoctorTable", ThisKey="DoctorID", OtherKey="DoctorID", IsForeignKey=true)]
		public DoctorTable DoctorTable
		{
			get
			{
				return this._DoctorTable.Entity;
			}
			set
			{
				DoctorTable previousValue = this._DoctorTable.Entity;
				if (((previousValue != value) 
							|| (this._DoctorTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DoctorTable.Entity = null;
						previousValue.PatientTables.Remove(this);
					}
					this._DoctorTable.Entity = value;
					if ((value != null))
					{
						value.PatientTables.Add(this);
						this._DoctorID = value.DoctorID;
					}
					else
					{
						this._DoctorID = default(int);
					}
					this.SendPropertyChanged("DoctorTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
